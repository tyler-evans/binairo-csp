+--------+--------------------------------------+--------------------+----------------------+--------------------+
|												   BACKTRACK.PY											         |
+--------+--------------------------------------+--------------------+----------------------+--------------------+
| Puzzle |                Metric                |       Random       |   Most Constrained   | Most Constraining  |
+--------+--------------------------------------+--------------------+----------------------+--------------------+
|  8x8   |      Average Runtime (seconds)       | 76.35960332552592  |  0.4654220740000407  |        -1.0        |
|        | Standard Deviation Runtime (seconds) | 27.870644145237346 | 0.058610115466354966 |        0.0         |
|        |        Average # Search Nodes        |      4588818       |         2399         |      2774922       |
|        |  Standard Deviation # Search Nodes   | 1960693.7225803523 |  174.30050678832424  | 106912.87370876655 |
|        |                                      |                    |                      |                    |
| 10x10  |      Average Runtime (seconds)       |        -1.0        |  3.8806209564208984  |        -1.0        |
|        | Standard Deviation Runtime (seconds) |        0.0         |  2.0332504999454692  |        0.0         |
|        |        Average # Search Nodes        |      17680553      |         8816         |      1731749       |
|        |  Standard Deviation # Search Nodes   | 2517372.815606514  |  3626.5504576969865  | 798597.3503065651  |
|        |                                      |                    |                      |                    |
| 12x12  |      Average Runtime (seconds)       |        -1.0        |  101.49121737480164  |        -1.0        |
|        | Standard Deviation Runtime (seconds) |        0.0         |  38.382431727298346  |        0.0         |
|        |        Average # Search Nodes        |      15482419      |        226400        |      1743834       |
|        |  Standard Deviation # Search Nodes   | 3363694.918568402  |  109509.70593513618  | 542727.4871562052  |
|        |                                      |                    |                      |                    |
| 14x14  |      Average Runtime (seconds)       |        -1.0        |         -1.0         |        -1.0        |
|        | Standard Deviation Runtime (seconds) |        0.0         |         0.0          |        0.0         |
|        |        Average # Search Nodes        |      11943038      |        522805        |      1274315       |
|        |  Standard Deviation # Search Nodes   | 2402192.791425414  |  4634.188913811012   | 14797.245787270307 |
|        |                                      |                    |                      |                    |
+--------+--------------------------------------+--------------------+----------------------+--------------------+

+--------+--------------------------------------+----------------------+------------------------+-----------------------+
|												   FORWARD_CHECKING.PY
+--------+--------------------------------------+----------------------+------------------------+-----------------------+
| Puzzle |                Metric                |        Random        |    Most Constrained    |   Most Constraining   |
+--------+--------------------------------------+----------------------+------------------------+-----------------------+
|  8x8   |      Average Runtime (seconds)       | 0.13295753796895346  |  0.12129894892374675   |  0.11529095967610677  |
|        | Standard Deviation Runtime (seconds) | 0.023347574230959678 | 0.00046536596396052525 | 0.0026268413472291625 |
|        |        Average # Search Nodes        |          17          |           16           |           16          |
|        |  Standard Deviation # Search Nodes   |  2.3570226039551585  |          0.0           |          0.0          |
|        |                                      |                      |                        |                       |
| 10x10  |      Average Runtime (seconds)       |   0.29090682665507   |   0.3085724512736003   |   0.2929066022237142  |
|        | Standard Deviation Runtime (seconds) | 0.00355780794082831  |  0.006657476366449519  |  0.002827603970372126 |
|        |        Average # Search Nodes        |          20          |           20           |           20          |
|        |  Standard Deviation # Search Nodes   |         0.0          |          0.0           |          0.0          |
|        |                                      |                      |                        |                       |
| 12x12  |      Average Runtime (seconds)       |  1.0706625779469807  |   0.7570873101552328   |   0.7930845419565836  |
|        | Standard Deviation Runtime (seconds) | 0.25488608711806876  |  0.001695143939846656  |  0.008988769305991497 |
|        |        Average # Search Nodes        |          31          |           24           |           25          |
|        |  Standard Deviation # Search Nodes   |  5.436502143433364   |          0.0           |          0.0          |
|        |                                      |                      |                        |                       |
| 14x14  |      Average Runtime (seconds)       |  2.868084987004598   |   1.6448085308074951   |   2.7331318060557046  |
|        | Standard Deviation Runtime (seconds) |  1.0216719675597914  |  0.018736904909889805  |  0.008288467376052863 |
|        |        Average # Search Nodes        |          39          |           28           |           37          |
|        |  Standard Deviation # Search Nodes   |  11.55662388223981   |   0.4714045207910317   |          0.0          |
|        |                                      |                      |                        |                       |
| 20x20  |      Average Runtime (seconds)       |  10.742897192637125  |   10.833200216293335   |   11.195436636606852  |
|        | Standard Deviation Runtime (seconds) | 0.020979908690030625 |  0.07066197674861124   |  0.24665417319887295  |
|        |        Average # Search Nodes        |          40          |           40           |           40          |
|        |  Standard Deviation # Search Nodes   |         0.0          |          0.0           |          0.0          |
|        |                                      |                      |                        |                       |
+--------+--------------------------------------+----------------------+------------------------+-----------------------+

================
RESULTS SUMMARY:
================

Heuristic Metric Analysis:
- The best heuristic for our representation of the CSP problem was the "Most Constrained" heuristic. Due to a row + column based representation of this CSP problem: Nodes in our representation have
  inherently more domain possibilities than a single cell representation. This means being able to instantiate a Node with it's "correct" value early on in the problem is key for the forward-checking
  /w constraint propagation algorithm, which causes neighbours to cut out domain items that are guaranteed to not be in the final solution. As for "Random" and "Most Constraining" heuristics, they seem
  to be more unpredictable in comparison to how they perform, relative to one another. This is because "Random" could introduce behaviour similar to the "Most Constrained" heuristic seemingly by chance, and
  the "Most Constraining" heuristic will always select the Node which, if instantiated with it's correct value, can have the greatest domain reduction of all neighbouring nodes in the graph, thereby generating
  the most rewarding node instantiation within the CSP.

General Algorithm Analysis:
- On average, the forward-checking w/ constraint propagation (FORWARD_CHECKING.PY) algorithm outperformed the backtracking (BACKTRACK.PY) algorithm by a large margin. Forward-checking w/ constraint
  propagation's metrics (average runtime + search nodes) became increasingly better in comparison to backtracking's metrics as puzzle dimensions grew. Backtracking's search nodes on average are much higher,
  which is intuitive because the algorithm is not "smart" and doesn't utilize instantiation information as well as forward-checking w/ constraint propagation to reduce neighbouring node's domains, thus
  creating a need for more search. Additionally, this causes the average run times for backtracking to increase much faster with higher puzzle dimensions, leading to longer runtimes, as can be seen in the tables
  where "-1" represents an inability to find a solution within the maximum 5 minute time frame in all 3 puzzle attempts. By making smarter decisions and reducing domains that were guaranteed to not be possible
  given instantiated values, forward-checking w/ constraint propagation maintained a consistent number of search nodes (on average x2 the puzzle dimensions) and extremely fast run times (t < 2 seconds on 14x14's
  and smaller puzzle dimensions, and t < 11 seconds on 20x20 utilizing the "most_constrained" heuristic)

Algorithm Results Comparison:
    - FC x574 faster than BT on the 8x8 puzzle, both utilizing "Random"
    - FC had .000003 the search node space in comparison to BT on the 8x8 puzzle, both utilizing "Random"

    - FC x4 faster than BT on the 8x8 puzzle, both utilizing "Most Constrained"
    - FC had .007 the search node space in comparison to BT on the 8x8 puzzle, both utilizing "Most Constrained"

    - FC x13 faster than BT on the 10x10 puzzle, both utilizing "Most Constrained"
    - FC had .002 the search node space in comparison to BT on the 10x10 puzzle, both utilizing "Most Constrained"

    - FC x134 faster than BT on the 12x12 puzzle, both utilizing "Most Constrained"
    - FC had .0001 the search node space in comparison to BT on the 12x12 puzzle, both utilizing "Most Constrained"

    - As puzzle dimensions grew > 12x12, BT became unable to finish any of the puzzles in a 5 minute time frame utilizing any heuristic,
      thus making FC exceedingly better than BT overall.


